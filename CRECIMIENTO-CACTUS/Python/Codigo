"""
Análisis de crecimiento de cactus
Requiere: pip install numpy matplotlib
"""

import numpy as np
import matplotlib.pyplot as plt

class AnalisisCactus:
    def __init__(self):
        self.dias = np.array([0, 7, 14, 21, 28, 35, 42, 49, 56, 63])
        self.alturas = np.array([0.0, 0.5, 1.2, 2.1, 3.4, 5.0, 7.1, 9.5, 12.0, 14.2])
    
    def mostrar_tabla_consola(self):
        """Muestra tabla formateada en consola"""
        print("\n{:<5} {:<10} {:<15}".format('Día', 'Altura (cm)', 'Tasa Diaria (cm/día)'))
        print("-" * 35)
        for i in range(len(self.dias)):
            tasa = (self.alturas[i] - self.alturas[i-1])/(self.dias[i] - self.dias[i-1]) if i > 0 else 0.0
            print("{:<5} {:<10.1f} {:<15.2f}".format(self.dias[i], self.alturas[i], tasa))
    
    def generar_grafico(self):
        """Crea y guarda gráfico profesional"""
        plt.style.use('ggplot')
        plt.figure(figsize=(10, 6))
        
        # Gráfico principal
        plt.plot(self.dias, self.alturas, 'o--', 
                 color='#2E5939', 
                 linewidth=2, 
                 markersize=8,
                 label='Datos reales')
        
        # Regresión polinómica
        coef = np.polyfit(self.dias, self.alturas, 2)
        polinomio = np.poly1d(coef)
        dias_suave = np.linspace(0, 63, 100)
        plt.plot(dias_suave, polinomio(dias_suave), 
                 color='#5E8C31',
                 linestyle='--',
                 label='Tendencia polinómica')
        
        # Personalización
        plt.title('Análisis de Crecimiento - Cactus', fontsize=14, pad=20)
        plt.xlabel('Días de Observación', fontsize=12)
        plt.ylabel('Altura (cm)', fontsize=12)
        plt.legend()
        plt.grid(alpha=0.3)
        plt.tight_layout()
        
        # Guardar y mostrar
        plt.savefig('crecimiento_cactus.png', dpi=300)
        plt.show()

if __name__ == "__main__":
    try:
        analisis = AnalisisCactus()
        print("=== Tabla de Crecimiento ===")
        analisis.mostrar_tabla_consola()
        print("\n=== Generando Gráfico ===")
        analisis.generar_grafico()
        print("\nProceso completado. Ver 'crecimiento_cactus.png'")
        
    except Exception as e:
        print(f"\nError: {str(e)}")
